1、
各位老师好，我是来自新项目研发部的刘巧如，申报职级为P4,下面将开始我的晋级陈述

2、
从20年9月入职至今，主要负责过三个项目的开发任务，其中两个微信小程序项目，一个pc端视频工具项目,分别是未来魔卡、晓刷题以及视频拆条

我将就这三个项目展开讲述开发过程中遇到的一些技术点

3、
首先是微信小程序项目，
未来魔卡是本人入职后参与的第一个项目，它是一个具备古诗词展示、音视频播放以及互动闯关等功能的文科类小程序；
晓刷题在摩卡开发经验之上，独立主导的一一个项目，是一个面向初中生，向初中生推荐数理化试题、试卷视频，满足学生智能刷题、跟随教材刷题场景的理科类小程序
经过不懈的努力，两个小程序均已成功上线，下面将从三个方面介绍此类小程序中可能会遇到的点

4、
第一个是框架选型问题
两个小程序均是采用uni-app+h5的形式进行开发
相比于原生微信小程序，选用uni-app有以下几点考虑：
首先是功能方面，uni-app是完全兼容微信小程序的功能的，小程序涉及到的功能点、技术点在uni-app上都可以直接使用，
在开发体验方面：小程序的语法私有化比较强，有自己的标签语法，uni-app上会更友好一些，专注于vue语法+使用到的小程序api，
在社区生态方面：uni-app具有丰富的插件市场，而且uni-app也是一个具有跨端能力的框架，如果未来有其他小程序的拓展方向，是一个很方便迁移的事情
采用h5的形式是因为魔卡和晓刷题均涉及到加密视频的播放问题，对于教研云内部加密视频，部门内部是有定制过的视频播放器，对于两个小程序的视频播放，也是封装了一个播放器组件共用，功能复用，ui调整；

5、
再一个涉及到的复杂点是古诗词的渲染，所有的古诗词数据均是从paper获取的，是一个json嵌套html的复杂数据格式，而且教研老师手动配置，获取的数据具有一定的不确定性，
左侧是我们获取到的一句古诗的数据格式，原始数据渲染之后是右侧上面的样式，下方是我们需要的目标样式，这里主要有两点问题：1个是拼音样式的问题：诗句html的方式修改起来灵活性不够高，当时有两个方案，一是前端进行样式适配兼容，一是后台进行数据格式化：就是将拼音、文字、注释独立存放在json里，而不是嵌套的html，但由于时间原因，当时选择的是前端进行适配，解决拼音位置的问题；
再有就是注释点击问题，在未确定使用h5进行渲染是，uni-app渲染富文本是会屏蔽富文本内节点的点击事件，导致无法添加自定义点击事件，改为h5方案之后是可以直接v-html渲染获取节点的点击事件的。


6、
除了内容渲染上的问题，再就是晓刷题遇到的性能优化问题，最明显的一个是试卷的渲染，一套试卷可能20-30道题，使用swipe进行渲染，一次性全部渲染，用户会等比较长的时间，体验非常不好，右下图1是优化前的试题渲染，会同时并发数十个请求，优化的方案是题目渲染只渲染当前显示的题目index以及上下两个题目，也就是序号是index-1和index+1的题目，其他位置均使用占位标签进行占位，不渲染真实题目，当进行窗口滑动时，再渲染当前index和index加减1的题目，右下图2是优化后的加载请求
 
以上是微信小程序开发过程遇到的一些点，接下来介绍的是视频拆条系统

7、
拆条系统是一个数据驱动的项目，主要围绕着视频数据流转；
系统流程涉及的比较多，首先是将培优、网校的数据经过算法标记，将标记结果给到后台存储，算法标记的结果就是一段json，将一个大视频拆分为若干的小片段，这是一个假拆分，然后拆条工具从后台获取到算法标记结果，进行数据展示，用户可以进行精细化的拆分合并-这一过程也是数据打点的过程，编辑完成之后进行结果提交，后台将大视频真正拆分为小视频，拆分完成的视频进入到视频审核平台，审核通过的视频进入到成果库。以上是整个视频拆条系统的流程，我主要负责这一流程的整个前端部分包括拆条工具、审核平台、成果库
下面详细介绍拆条工具这一模块设计到的一些技术点

8、 asr-自动语音识别技术
拆条工具主要思想是数据驱动以及组件化设计，数据主要存贮在vuex中，更新时会联动到时间轴轨道、切片列表、播放器组件，组件图中大致描绘了涉及到的组件，右上是播放器组件，下方是时间轴模块，时间轴中包含了轨道以及切片组件，左上表示所有的切片列表，组件化的设计会使之后的拓展非常方便，例如新增加的asr信息，在原版的基础上增加轨道是非常快捷方便的

可以看到一个视频非常长的时候，切片数据以及asr数据是非常多的，这就导致首屏加载时间长以及时间轴缩放时卡顿，所以实现了类似虚拟列表的功能

9、
如图所示，可视区域只能显示部分数据，首先我们根据窗口的scrollleft和clientwidth获取到可视区域左右两侧对应的开始时间和结束时间，当窗口进行滑动的时候，同步更新starttime和endtime，然后判断每个切片的开始时间结束时间是否落在了我们记录的可视区域的左右两侧时间（结束时间》view_time_start & 开始时间《view_time_end），满足条件的数据进行展示，其他数据均不展示，这里有一个注意点，就是第一个切片和最后一个切片默认保留，防止scrollleft发生错误

但是，虽然使用了虚拟列表，还是会有问题，当时间轴一直缩小到完全缩放在可视范围内的时候，依旧是会渲染全部数据的，因为所有切片的开始结束时间均满足渲染要求

所以在asr数据上加入了分层的逻辑



10、
分层具体实现方式
如图所示，以1s为例，当当前切片的开始时间与上一个切片的结束时间间隔小于1s时，两个切片进行数据合并，也就是文本的合并和开始时间结束时间的合并，合并为一个切片，间隔时间大于1s，就是一个新的切片，以此类推，这样切片数量会大范围下降，目前我们存储了间隔10s进行合并、5s进行合并以及1s进行间隔的三组数据，当然这个间隔可以修改配置的

数据存储好之后如何展示呢 
首先获取到可视区域占据时间轴总长的比例，判断当前比例下每组数据渲染的列表是否会超出我们的limitcount值，这个limitcount是经过自己测试出来的，以比例为0.3为例 ，1s的数组预计150个切片需要渲染，5s的数组预计60个切片需要渲染，60<limitcount，好，选中这个asr结果，字幕轨拿到这个asr结果进行虚拟列表渲染，这样即使比例是1，也就是可视区域与时间轴总长等宽的时候，渲染的切片数量也不会太多


11、
除此之外，如右下图所示，当展开一个切片希望查看该条切片所有的asr结果时，涉及到一个数据遍历的问题，每一次展开详情，都需要遍历原始asr的每一个item，判断其开始时间结束时间是否落在了当前切片中，这样的遍历也不是一个很好的方法，所以搭建了一个asr的索引结构

如左图，设置一个间隔是30s，开始时间/索引间隔的结果即为当前item所在的数组index，例如3号asr数据，他的开始时间为45s，45/30=1.5所以，3号位于index = 1的项里面，这样创建了一个二位数组，当点击某一个切片时，判断当前切片的开始时间结束时间，开始时间/30s得到min_index,结束时间/30s得到max_index,循环min到max，得到里面所存储的asrIndex，最终得到展示的所有列表
这种方法只需要在初始化搭建索引结构时进行一个遍历，之后查找数据效率大大提高


以上是接入asr涉及到的优化点，

12、优化完成后洗能比之前提高了几倍，performance上飙红处明显减少



以上是我在这半年的工作中涉及的业务和技术点，成长了很多

13、
关于自己的专长：有些c++的开发经验，具备大前端的一些潜质；并且对于视频处理这部分兴趣非常浓厚，半年以来接触到了丰富的业务项目，已经可以独立负责一个项目的开发，有一些不足的地方是自己的技术深度稍有欠缺，依旧需要不断的学习提高



14、
下面是在开发阶段上遇到的一些性能优化点：
除了前面有提到的虚拟列表和避免一次性的渲染大批量数据，还有比如适当的使用缓存，对于数据不会频繁更新的数据例如晓刷题的试题专辑，可以进行缓存，再有就是减少http请求次数，尽量将请求合并


15、
对于自己的未来的工作，首要的还是踏踏实实把每一个需求做好，把遇到的每个问题都当作一次沉淀，成长起来，同时做到长期的技术探索，保持热情，

16、以上是我的全部述职内容，感谢各位老师的倾听



